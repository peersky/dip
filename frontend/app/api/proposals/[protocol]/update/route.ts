import { NextRequest, NextResponse } from "next/server";
import { Octokit } from "@octokit/rest";
import {
  getInstallationOctokit,
  getAppAuthenticatedOctokit,
} from "../../../../../lib/github-app";

import { prisma } from "@/lib/prisma";

interface UpdateRequestBody {
  filename: string;
  content: string;
  title: string;
  description: string;
  githubInstallationId: string;
  eipNumber: string;
  editTitle: string;
}

export async function POST(
  request: NextRequest,
  context: { params: Promise<{ protocol: string }> },
) {
  const body: UpdateRequestBody = await request.json();
  const {
    filename,
    content,
    title,
    description,
    githubInstallationId,
    eipNumber,
    editTitle,
  } = body;
  const { protocol } = await context.params;

  if (
    !protocol ||
    !filename ||
    !content ||
    !title ||
    !githubInstallationId ||
    !eipNumber ||
    !editTitle
  ) {
    return NextResponse.json(
      { success: false, error: "Missing required fields." },
      { status: 400 },
    );
  }

  try {
    const prefix = filename.split("-")[0];
    const repository = await prisma.repository.findFirst({
      where: {
        protocol: protocol,
        proposalPrefix: prefix.toUpperCase(),
      },
    });

    if (!repository) {
      return NextResponse.json(
        {
          success: false,
          error: `Repository for prefix '${prefix}' not found for protocol '${protocol}'.`,
        },
        { status: 404 },
      );
    }

    const upstreamOwner = "peeramid-labs";
    const upstreamRepo = repository.repo;
    const eipsFolder = repository.eipsFolder;
    const baseBranch = repository.branch;
    const filePath = `${eipsFolder}/${filename}`;

    const installationOctokit = await getInstallationOctokit(
      parseInt(githubInstallationId, 10),
    );
    if (!installationOctokit) {
      throw new Error("Failed to authenticate as GitHub App installation.");
    }

    const appOctokit = getAppAuthenticatedOctokit();
    const { data: installation } = await appOctokit.apps.getInstallation({
      installation_id: parseInt(githubInstallationId, 10),
    });

    if (!installation.account || !("login" in installation.account)) {
      throw new Error("Could not identify fork owner from installation.");
    }
    const forkOwner = installation.account.login;
    const forkRepo = upstreamRepo;

    try {
      await installationOctokit.repos.mergeUpstream({
        owner: forkOwner,
        repo: forkRepo,
        branch: baseBranch,
      });
      console.log(
        `Successfully synced ${forkOwner}/${forkRepo} with upstream.`,
      );
    } catch (error: any) {
      console.warn(
        `Could not sync fork, it may be up-to-date. Reason: ${error.message}`,
      );
    }

    const { data: refData } = await installationOctokit.git.getRef({
      owner: forkOwner,
      repo: forkRepo,
      ref: `heads/${baseBranch}`,
    });
    const baseSha = refData.object.sha;

    const newBranchName = `dip-update-${eipNumber}-${Date.now()}`;
    await installationOctokit.git.createRef({
      owner: forkOwner,
      repo: forkRepo,
      ref: `refs/heads/${newBranchName}`,
      sha: baseSha,
    });

    let fileSha: string | undefined;
    try {
      const { data: fileData } = await installationOctokit.repos.getContent({
        owner: forkOwner,
        repo: forkRepo,
        path: filePath,
        ref: baseBranch,
      });
      if (!Array.isArray(fileData) && "sha" in fileData) {
        fileSha = fileData.sha;
      }
    } catch (e: any) {
      if (e.status !== 404) throw e;
    }

    await installationOctokit.repos.createOrUpdateFileContents({
      owner: forkOwner,
      repo: forkRepo,
      path: filePath,
      message: `Update ${filename}`,
      content: Buffer.from(content).toString("base64"),
      branch: newBranchName,
      sha: fileSha,
    });

    const prTitle = `Update ${filename}: ${editTitle}`;
    const prBody = `This pull request was generated by the DIP platform to update \`${filename}\`.

**Description:**
${description || "No description provided."}`;

    const { data: pullRequest } = await installationOctokit.pulls.create({
      owner: upstreamOwner,
      repo: upstreamRepo,
      title: prTitle,
      head: `${forkOwner}:${newBranchName}`,
      base: baseBranch,
      body: prBody,
      maintainer_can_modify: true,
    });

    return NextResponse.json({
      success: true,
      pullRequestUrl: pullRequest.html_url,
    });
  } catch (error: any) {
    console.error("Failed to create pull request:", error);
    return NextResponse.json(
      {
        success: false,
        error: `An unexpected error occurred: ${error.message}`,
      },
      { status: 500 },
    );
  }
}
