// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(uuid())
  walletAddress           String    @unique
  isOnboarded             Boolean   @default(false)

  // Political stance questionnaire data
  economicPosition        Float?    // -1 (left) to 1 (right)
  socialPosition          Float?    // -1 (progressive) to 1 (conservative)
  authPosition            Float?    // -1 (libertarian) to 1 (authoritarian)
  globalPosition          Float?    // -1 (globalist) to 1 (nationalist)
  envPosition             Float?    // -1 (ecological) to 1 (industrial)
  stanceDescription       String?   @db.VarChar(10000)
  priorityCategories      String[]  // Array of category values

  // Additional comments for each section
  economicSocialComment   String?   @db.VarChar(1500)
  authorityGlobalComment  String?   @db.VarChar(1500)
  environmentalComment    String?   @db.VarChar(1500)

  // AI usage tracking
  aiGenerationCount       Int       @default(0)
  citizenship             String?   @db.VarChar(255)

  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

// EIP Data Storage Models
model Repository {
  id              String    @id @default(uuid())
  owner           String
  repo            String
  branch          String
  eipsFolder      String
  protocol        String
  proposalPrefix  String
  enabled         Boolean   @default(true)
  description     String?
  website         String?

  // Relationships
  rawFiles        RawFile[]
  crawlRuns       CrawlRun[]

  // Metadata
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([owner, repo, protocol])
  @@index([protocol])
}

model CrawlRun {
  id                String    @id @default(uuid())
  repositoryId      String
  repository        Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  // Crawl metadata
  startedAt         DateTime  @default(now())
  completedAt       DateTime?
  status            String    @default("running") // running, completed, failed
  totalFilesFound   Int?
  totalProcessed    Int       @default(0)
  totalErrors       Int       @default(0)
  errorDetails      Json?     // Store any error information

  // GitHub API usage
  apiCallsUsed      Int       @default(0)
  rateLimitHit      Boolean   @default(false)

  // Relationships
  rawFiles          RawFile[]

  @@index([repositoryId, startedAt])
}

model RawFile {
  id                String    @id @default(uuid())

  // Repository info
  repositoryId      String
  repository        Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  crawlRunId        String?
  crawlRun          CrawlRun? @relation(fields: [crawlRunId], references: [id], onDelete: SetNull)

  // File metadata from GitHub
  githubPath        String    // Full path in repository
  githubSha         String    // Git SHA for tracking changes
  fileSize          Int?      // File size in bytes
  lastCommitDate    DateTime?

  // Raw content - no processing at all
  rawMarkdown       String    @db.Text // Full raw markdown content as-is

  // Timestamps
  crawledAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@unique([repositoryId, githubPath]) // One record per file path per repository
  @@index([repositoryId])
  @@index([crawledAt])
}
