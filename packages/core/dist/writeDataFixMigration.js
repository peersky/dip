"use strict";
/**
 * This script automates the process of fixing 'Unknown' data in the database.
 * It performs two main functions:
 * 1. Generates SQL UPDATE statements based on a "last known valid state" heuristic.
 * 2. Automatically finds the most recent migration folder ending in '_data_fix_unknowns'
 *    and writes the generated SQL directly into its 'migration.sql' file.
 *
 * This eliminates the need for manual copy-pasting and makes the data-fixing
 * process safer and more reliable.
 *
 * To use this script:
 * 1. First, create an empty migration:
 *    (from `packages/database`)
 *    `pnpm prisma migrate dev --create-only --name data-fix-unknowns`
 *
 * 2. Then, run this script to populate that migration file:
 *    (from `packages/core`)
 *    `pnpm ts-node src/writeDataFixMigration.ts`
 *
 * 3. Finally, apply the now-populated migration:
 *    (from `packages/database`)
 *    `pnpm prisma migrate dev`
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dip_database_1 = require("@peeramid-labs/dip-database");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
async function writeDataFixMigration() {
    console.log("Starting automated data-fix migration writer...");
    // 1. Find the target migration directory
    const migrationsPath = path_1.default.join(__dirname, "../../database/prisma/migrations");
    const migrationDirs = fs_1.default.readdirSync(migrationsPath);
    const targetDirName = migrationDirs.find((dir) => dir.endsWith("_data_fix_unknowns"));
    if (!targetDirName) {
        console.error("\x1b[31m%s\x1b[0m", "ERROR: No migration directory ending in '_data_fix_unknowns' found.");
        console.error("Please create one first by running: pnpm prisma migrate dev --create-only --name data-fix-unknowns");
        process.exit(1);
    }
    const migrationFilePath = path_1.default.join(migrationsPath, targetDirName, "migration.sql");
    console.log(`Found target migration file: ${migrationFilePath}`);
    // 2. Generate the data fix SQL statements
    console.log("Analyzing proposal versions to find 'Unknown' values...");
    const allVersions = await dip_database_1.prisma.proposalVersion.findMany({
        orderBy: [{ proposalId: "asc" }, { commitDate: "asc" }],
    });
    if (allVersions.length === 0) {
        console.log("No proposal versions found. Nothing to do.");
        return;
    }
    const lastKnownState = new Map();
    const sqlUpdateStatements = [];
    for (const version of allVersions) {
        const currentState = lastKnownState.get(version.proposalId) || {
            status: "Unknown",
            type: "Unknown",
        };
        let newStatus = version.status;
        let newType = version.type;
        let needsUpdate = false;
        if (version.status === "Unknown" && currentState.status !== "Unknown") {
            newStatus = currentState.status;
            needsUpdate = true;
        }
        if (version.type === "Unknown" && currentState.type !== "Unknown") {
            newType = currentState.type;
            needsUpdate = true;
        }
        if (needsUpdate) {
            const statement = `UPDATE "ProposalVersion" SET "status" = '${newStatus.replace(/'/g, "''")}', "type" = '${newType.replace(/'/g, "''")}' WHERE "id" = '${version.id}';`;
            sqlUpdateStatements.push(statement);
        }
        // After processing, update our map with any valid info from the current version
        // to be used by the next version of the same proposal.
        lastKnownState.set(version.proposalId, {
            status: version.status !== "Unknown" ? version.status : currentState.status,
            type: version.type !== "Unknown" ? version.type : currentState.type,
        });
    }
    // 3. Write the generated SQL to the migration file
    if (sqlUpdateStatements.length > 0) {
        const fileHeader = `-- Auto-generated Data Fix Script
-- Generated by writeDataFixMigration.ts on ${new Date().toISOString()}
-- This script fixes 'Unknown' status and type values by propagating the last known valid state.

`;
        const fileContent = fileHeader + sqlUpdateStatements.join("\n");
        fs_1.default.writeFileSync(migrationFilePath, fileContent);
        console.log("\x1b[32m%s\x1b[0m", `SUCCESS: Wrote ${sqlUpdateStatements.length} data-fix statements to the migration file.`);
        console.log("You can now apply this migration by running: pnpm prisma migrate dev");
    }
    else {
        console.log("Analysis complete. No 'Unknown' values found that could be fixed.");
    }
}
writeDataFixMigration()
    .catch((e) => {
    console.error("\x1b[31m%s\x1b[0m", "An error occurred during the migration writing process:");
    console.error(e);
    process.exit(1);
})
    .finally(async () => {
    await dip_database_1.prisma.$disconnect();
});
