"use strict";
/**
 * This script generates a data migration to clean up historical data by
 * stripping the YAML frontmatter from the `rawMarkdown` field of all
 * `ProposalVersion` records.
 *
 * The data ingestion pipeline was updated to do this for new proposals, but
 * this script is necessary to clean up any existing data that was ingested
 * before the fix.
 *
 * To use this script:
 * 1. First, create a new, empty migration:
 *    (from `packages/database`)
 *    `pnpm prisma migrate dev --create-only --name data-fix-frontmatter`
 *
 * 2. Then, run this script to populate that migration file:
 *    (from `packages/core`)
 *    `pnpm ts-node src/writeDataFixMigrationV2.ts`
 *
 * 3. Finally, review the generated `migration.sql` and apply it:
 *    (from `packages/database`)
 *    `pnpm prisma migrate dev`
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dip_database_1 = require("@peeramid-labs/dip-database");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const gray_matter_1 = __importDefault(require("gray-matter"));
async function writeFrontmatterFixMigration() {
    console.log("Starting frontmatter-stripping migration writer...");
    // 1. Find the target migration directory
    const migrationName = "data-fix-frontmatter";
    const migrationsPath = path_1.default.join(__dirname, "../../database/prisma/migrations");
    if (!fs_1.default.existsSync(migrationsPath)) {
        console.error("\x1b[31m%s\x1b[0m", `ERROR: The migrations directory does not exist at ${migrationsPath}.`);
        console.error("Please run 'pnpm prisma migrate dev' in the database package at least once to initialize it.");
        process.exit(1);
    }
    const migrationDirs = fs_1.default.readdirSync(migrationsPath);
    const targetDirName = migrationDirs.find((dir) => dir.endsWith(`_${migrationName}`));
    if (!targetDirName) {
        console.error("\x1b[31m%s\x1b[0m", `ERROR: No migration directory ending in '_${migrationName}' found.`);
        console.error(`Please create one first by running: pnpm prisma migrate dev --create-only --name ${migrationName}`);
        process.exit(1);
    }
    const migrationFilePath = path_1.default.join(migrationsPath, targetDirName, "migration.sql");
    console.log(`Found target migration file: ${migrationFilePath}`);
    // 2. Fetch all proposal versions from the database
    console.log("Fetching all proposal versions to analyze...");
    const allVersions = await dip_database_1.prisma.proposalVersion.findMany({
        select: {
            id: true,
            rawMarkdown: true,
        },
    });
    if (allVersions.length === 0) {
        console.log("No proposal versions found. Nothing to do.");
        return;
    }
    console.log(`Found ${allVersions.length} versions to analyze.`);
    const sqlUpdateStatements = [];
    // 3. Iterate through each version, strip frontmatter, and generate SQL if changed
    for (const version of allVersions) {
        // gray-matter is very efficient. If there's no frontmatter, it just returns the original string.
        const { content } = (0, gray_matter_1.default)(version.rawMarkdown);
        // Only create an UPDATE statement if the content has actually changed.
        if (content.trim() !== version.rawMarkdown.trim()) {
            // Properly escape single quotes for SQL.
            const escapedContent = content.replace(/'/g, "''");
            const statement = `UPDATE "ProposalVersion" SET "rawMarkdown" = '${escapedContent}' WHERE "id" = '${version.id}';`;
            sqlUpdateStatements.push(statement);
        }
    }
    // 4. Write the generated SQL to the migration file
    if (sqlUpdateStatements.length > 0) {
        const fileHeader = `-- Auto-generated Data Fix Script
-- Generated by writeDataFixMigrationV2.ts on ${new Date().toISOString()}
-- This script cleans historical data by stripping YAML frontmatter from the rawMarkdown field.

`;
        const fileContent = fileHeader + sqlUpdateStatements.join("\n");
        fs_1.default.writeFileSync(migrationFilePath, fileContent);
        console.log("\x1b[32m%s\x1b[0m", `SUCCESS: Wrote ${sqlUpdateStatements.length} data-fix statements to the migration file.`);
        console.log("You can now apply this migration by running: pnpm prisma migrate dev");
    }
    else {
        console.log("Analysis complete. No proposal versions with frontmatter were found. Your data is already clean!");
    }
}
writeFrontmatterFixMigration()
    .catch((e) => {
    console.error("\x1b[31m%s\x1b[0m", "An error occurred during the migration writing process:");
    console.error(e);
    process.exit(1);
})
    .finally(async () => {
    await dip_database_1.prisma.$disconnect();
});
